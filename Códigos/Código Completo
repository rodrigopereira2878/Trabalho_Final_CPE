#include <iostream>     // Entrada e saída padrão
#include <vector>       // Vetores dinâmicos
#include <algorithm>    // Funções de ordenação e busca
#include <ctime>        // Para srand(time(0))
#include <cstdlib>      // Para rand()
#include <string>       // Manipulação de strings
#include <limits>       // Para cin.ignore()
#include <iomanip>      // Para manipulação de saída formatada
#include <utility>      // Para std::pair
#include <cmath>        // Para operações matemáticas
#include <map>         // Para uso de mapas
#include <set>         // Para uso de conjuntos
#include <queue>       // Para filas e priority_queue
#include <fstream>     // Para manipulação de arquivos

using namespace std;

#define ll long long int
#define pb push_back
#define pii pair<int, int>
#define ff first
#define ss second 
#define _ ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define all(x) x.begin(), x.end()
#define teto(a, b) ((a) + (b) - 1) / (b)

const int INF = 0x3f3f3f3f;
const ll LLINF = 0x3f3f3f3f3f3f3f3f;

// Struct para armazenar informações do jogador
struct Jogador {
    string nome;
    int pontuacao;
};

// Variáveis globais para os jogadores
Jogador J1 = {"", 0};
Jogador J2 = {"", 0};

// Função para salvar o placar em um arquivo TXT
void SalvarPlacar(const Jogador& J1, const Jogador& J2) { 
    ofstream arquivo("placar.txt");
    if (arquivo.is_open()) {
        arquivo << "Placar final:\n";
        arquivo << J1.nome << ": " << J1.pontuacao << " vitórias\n";
        arquivo << J2.nome << ": " << J2.pontuacao << " vitórias\n";
        arquivo.close();
        cout << "Placar salvo em 'placar.txt'.\n";
    } else {
        cout << "Erro ao salvar o placar.\n";
    }
}

// Função para exibir o tabuleiro 
void ExibirTabuleiro(char tab[3][3]) { 
    cout << endl;
    cout << "a  " << tab[0][0] << " | " << tab[0][1] << " | " << tab[0][2] << endl;
    cout << "   _________" << endl;
    cout << endl;
    cout << "b  " << tab[1][0] << " | " << tab[1][1] << " | " << tab[1][2] << endl;
    cout << "   _________" << endl;
    cout << endl;
    cout << "c  " << tab[2][0] << " | " << tab[2][1] << " | " << tab[2][2] << endl;
    cout << endl;
    cout << "   1    2    3" << endl;
    cout << endl;
}

// Função para verificar se há vencedor; retorna 'X' ou 'O' se houver, ou '-' se não houve
char VerificaVencedor(char tab[3][3]) { 
    // Linhas
    for(int i = 0; i < 3; i++){
        if(tab[i][0] == tab[i][1] and tab[i][1] == tab[i][2] and tab[i][0] != '-')
            return tab[i][0];
    }
    // Colunas
    for(int j = 0; j < 3; j++){
        if(tab[0][j] == tab[1][j] and tab[1][j] == tab[2][j] and tab[0][j] != '-')
            return tab[0][j];
    }
    // Diagonais
    if(tab[0][0] == tab[1][1] and tab[1][1] == tab[2][2] and tab[0][0] != '-') return tab[0][0];
    if(tab[0][2] == tab[1][1] and tab[1][1] == tab[2][0] and tab[0][2] != '-') return tab[0][2];

    return '-';
}

// Função para checar se não há mais espaços vazios (pra verificar empate)
bool TabuleiroCheio(char tab[3][3]){ 
    for(int i = 0; i < 3; i++){
        for(int j = 0; j < 3; j++){
            if(tab[i][j] == '-') return false;
        }
    }
    return true;
}

// Jogo principal
//   &scoreJ1, &scoreJ2: placar acumulado (passado por referência)
void Jogo(Jogador &J1, Jogador &J2){

    // Sorteio de quem começa a jogar checando se o número aleatório é par ou ímpar
    srand(time(0));
    int NumeroAleatorio = rand();
    bool quemjoga = true;  // true -> J1, false -> J2

    if(NumeroAleatorio % 2 == 0){
        quemjoga = true;
        cout << J1.nome << " foi sorteado(a) para começar!" << endl;
    }
    else{
        quemjoga = false;
        cout << J2.nome << " foi sorteado(a) para começar!" << endl;
    }

    // Tabuleiro inicial vazio (usei '-'' em vez de espaço)
    char a[3] = {'-','-','-'};
    char b[3] = {'-','-','-'};
    char c[3] = {'-','-','-'};
    char tabuleiro[3][3] = {
        {a[0],a[1],a[2]},
        {b[0],b[1],b[2]},
        {c[0],c[1],c[2]}
    };

    cout << "------------------------- Início de Jogo -------------------------" << endl;
    cout << endl << endl;
    ExibirTabuleiro(tabuleiro);

    cout << "Regras:" << endl << endl;
    cout << "1- O jogador deve, durante sua vez, escolher qual quadrado disponivel" << endl
         << "   ex: a1, a2, b3 etc." << endl << endl;
    cout << "2- Se o jogador escolher uma posição já ocupada ou uma posição inválida, ele perde sua vez." << endl << endl;
    cout << "3- Quem começa jogando é escolhido aleatoriamente." << endl << endl;
    cout << "4- Ao final, pode-se escolher jogar novamente." << endl << endl;

    // Esse for é até atingir as nove jogadas ou até alguém vencer
    for(int jogada = 0; jogada < 9; jogada++){

        char vencedorAntes = VerificaVencedor(tabuleiro);
        if(vencedorAntes != '-'){
            break; // caso tenha vencedor antes das nove jogadas
        }

        // Mostra tabuleiro a cada jogada
        cout << "Vez de ";
        if(quemjoga) cout << J1.nome << " (X)" << endl;
        else         cout << J2.nome << " (O)" << endl;

        // Se for contra o COMPUTADOR, escolhe jogada aleatória
        if(!quemjoga and J2.nome == "COMPUTADOR"){

            while(true){
                int linha = rand() % 3; // 0..2
                int coluna = rand() % 3; // 0..2
                if(tabuleiro[linha][coluna] == '-'){
                    tabuleiro[linha][coluna] = 'O';
                    break;
                }
            }
            cout << "COMPUTADOR jogou automaticamente." << endl;
        }
        else{
            // Jogada do usuário
            cout << "Informe a casa (ex: a1): " << endl;
            string jog;
            cin >> jog;

            if(jog.size() != 2){
                cout << "Entrada invalida, perdeu a vez." << endl;
            }
            else{
                char lin = jog[0];
                char col = jog[1];
                int l = -1, c = -1;

                if(lin == 'a' or lin == 'A') l = 0;
                else if(lin == 'b' or lin == 'B') l = 1;
                else if(lin == 'c' or lin == 'C') l = 2;

                if(col == '1') c = 0;
                else if(col == '2') c = 1;
                else if(col == '3') c = 2;

                if(l >= 0 and l < 3 and c >= 0 and c < 3){
                    if(tabuleiro[l][c] == '-'){
                        if(quemjoga) tabuleiro[l][c] = 'X';
                        else          tabuleiro[l][c] = 'O';
                    } else {
                        cout << "Posicao ocupada! Perdeu a vez." << endl;
                    }
                } else {
                    cout << "Posicao invalida! Perdeu a vez." << endl;
                }
            }
        }

        // Atualiza e mostra o tabuleiro
        ExibirTabuleiro(tabuleiro);

        // Verificador de vencedor a partir do tabuleiro atual
        char vencedor = VerificaVencedor(tabuleiro);
        if(vencedor == 'X'){
            cout << J1.nome << " venceu a partida!" << endl;
            J1.pontuacao++;
            break;
        }
        else if(vencedor == 'O'){
            cout << J2.nome << " venceu a partida!" << endl;
            J2.pontuacao++;
            break;
        }

        // Se não houve vencedor e tabuleiro cheio aconteceu Empate
        if(TabuleiroCheio(tabuleiro)){
            cout << "Empate!" << endl;
            break;
        }

        // Passa a vez pro próximo jogadr
        quemjoga = !quemjoga;
    }

    // Mostra tabuleiro final após o final
    cout << "Tabuleiro final: " << endl;
    ExibirTabuleiro(tabuleiro);
}

// Singleplayer: repete partidas com (Jogador vs COMPUTADOR) enquanto o usuário quiser
void Singleplayer(){
    // Reset dos placares ao iniciar um novo jogo 
    J1.pontuacao = 0;
    J2.pontuacao = 0;

    // Pede nome do jogador
    cout << endl << "Escreva o nome do jogador: " << endl;
    cin >> J1.nome;
    J2.nome = "COMPUTADOR";

    while (true) {
        // Joga uma partida
        Jogo(J1, J2);

        // Mostra placar parcial (Entre uma partida e outra)
        cout << "Placar: " << J1.nome << " = " << J1.pontuacao
             << " | " << J2.nome << " = " << J2.pontuacao << endl;

        // Pergunta se quer jogar novamente
        cout << "Gostaria de jogar novamente? (s/n)" << endl;
        char resp;
        cin >> resp;

        if (resp == 'n' || resp == 'N') {
            // Mostra placar final e salva em arquivo
            cout << "Placar final: " << J1.nome << " = " << J1.pontuacao
                 << " | " << J2.nome << " = " << J2.pontuacao << endl;
            SalvarPlacar(J1, J2); // Arquivo é gerado aqui
            cout << "Voltando ao menu inicial." << endl;
            break;
        } else {
            cout << "Iniciando nova partida..." << endl;
        }
    }
}

// Multiplayer: repete partidas com (Jogador1 vs Jogador2) enquanto o usuário quiser
void Multiplayer() {
    // Reset dos placares ao iniciar um novo jogo
    J1.pontuacao = 0;
    J2.pontuacao = 0;

    // Pede nome dos jogadores
    cout << endl << "Escreva o nome do jogador 1: " << endl;
    cin >> J1.nome;
    cout << endl << "Escreva o nome do jogador 2: " << endl;
    cin >> J2.nome;

    while (true) {
        // Joga uma partida
        Jogo(J1, J2);

        // Mostra placar
        cout << "Placar: " << J1.nome << " = " << J1.pontuacao
             << " | " << J2.nome << " = " << J2.pontuacao << endl;

        // Pergunta se deseja jogar novamente
        cout << "Gostaria de jogar novamente? (s/n)" << endl;
        char resp;
        cin >> resp;

        if (resp == 'n' || resp == 'N') {
            // Mostra placar final e salva em arquivo
            cout << "Placar final: " << J1.nome << " = " << J1.pontuacao
                 << " | " << J2.nome << " = " << J2.pontuacao << endl;
            SalvarPlacar(J1, J2); // Arquivo é gerado aqui
            cout << "Voltando ao menu inicial." << endl;
            break;
        } else {
            cout << "Iniciando nova partida..." << endl;
        }
    }
}
int main(){
    cout << "------------------------- JOGO DA VELHA -------------------------" << endl;
    cout << endl;
    cout << endl;
    cout << "Authors: " << endl;
    cout << "Pedro Guimarães Batista - 190134763" << endl;
    cout << "Rodrigo Correa Pereira - 190095148" << endl;
    cout << endl;
    cout << endl;

    while(true){
        cout << endl;
        cout << "Opções de jogo: " << endl;
        cout << endl;
        cout << " - [1] ->  Multi - Player" << endl;
        cout << " - [2] ->  Single - Player (Jogue contra o COMPUTADOR)" << endl;
        cout << " - [3] ->  Sair" << endl;  
        cout << endl;
        cout << "Escolha qual opção deseja: " << endl;

        int OpcaoDeJogo = 0;
        cin >> OpcaoDeJogo;

        if(OpcaoDeJogo == 1){
            Multiplayer();
        }
        else if(OpcaoDeJogo == 2){ //usar switch
            Singleplayer();
        }
        else if(OpcaoDeJogo == 3){
            cout << "Obrigado por jogar!" << endl;
            break;  // Encerra o programa
        }
        else{
            cout << "Opção não disponível. Escolha novamente." << endl;
            continue;
        }
    }

    return 0;
}
